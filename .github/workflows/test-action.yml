name: Docker Compose Cache Action Test Suite

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/test-action.yml'
      - 'action.yml'
      - 'dist/index.js'
      - 'examples/**'
  pull_request:
  workflow_dispatch:

jobs:
  generate-run-id:
    name: Generate Unique Run ID
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set-run-id.outputs.run_id }}
    steps:
      - name: Set Run ID
        id: set-run-id
        run: |
          UNIQUE_ID="test-$(date +%Y%m%d%H%M%S)-$(openssl rand -hex 2)"
          echo "Generated Run ID: $UNIQUE_ID"
          echo "run_id=$UNIQUE_ID" >> "$GITHUB_OUTPUT"

  test-first-run:
    name: Test Cache Miss - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    needs: generate-run-id
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: 'Simple Compose'
            files: 'examples/simple/compose.yaml'
            exclude: ''
          - scenario: 'Override Compose'
            files: 'examples/override/compose.yaml'
            exclude: ''
          - scenario: 'Platform Specific'
            files: 'examples/platform/compose.yaml'
            exclude: ''
          - scenario: 'Multi-File Compose'
            files: "examples/multi-file/compose.yaml\nexamples/multi-file/compose.override.yaml"
            exclude: ''
          - scenario: 'Image Exclusion'
            files: 'examples/exclude/compose.yaml'
            exclude: 'redis:7-alpine'
          - scenario: 'No Images Defined'
            files: 'examples/no-images/compose.yaml'
            exclude: ''
          - scenario: 'Empty Compose File'
            files: 'examples/empty/compose.yaml'
            exclude: ''
    outputs:
      test-result: ${{ steps.validate.outputs.result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Cache Action
        id: docker-cache
        uses: ./
        with:
          compose-files: ${{ matrix.files }}
          exclude-images: ${{ matrix.exclude }}
          cache-key-prefix: ${{ needs.generate-run-id.outputs.run_id }}-${{ github.run_attempt }}-${{ matrix.scenario }}

      - name: Output Action Results to Summary
        run: |
          echo "## Action Outputs for ${{ matrix.scenario }} (First Run)" >> $GITHUB_STEP_SUMMARY
          echo "| Output | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ------ | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Hit | ${{ steps.docker-cache.outputs.cache-hit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image List | ${{ steps.docker-cache.outputs.image-list }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Assert Cache Miss
        id: validate
        run: |
          hit="${{ steps.docker-cache.outputs.cache-hit }}"
          list='${{ steps.docker-cache.outputs.image-list }}'
          echo "Scenario: ${{ matrix.scenario }}"
          echo "Cache Hit: $hit"

          # Handle special scenarios
          if [[ "${{ matrix.scenario }}" == "Empty Compose File" || "${{ matrix.scenario }}" == "No Images Defined" ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For normal scenarios, cache-hit should be false
          if [[ "$hit" == "true" ]]; then
            echo "::error::Unexpected cache hit on first run"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "result=success" >> $GITHUB_OUTPUT

  test-second-run:
    name: Test Cache Hit - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    needs: [generate-run-id, test-first-run]
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: 'Simple Compose'
            files: 'examples/simple/compose.yaml'
            exclude: ''
          - scenario: 'Override Compose'
            files: 'examples/override/compose.yaml'
            exclude: ''
          - scenario: 'Platform Specific'
            files: 'examples/platform/compose.yaml'
            exclude: ''
          - scenario: 'Multi-File Compose'
            files: "examples/multi-file/compose.yaml\nexamples/multi-file/compose.override.yaml"
            exclude: ''
          - scenario: 'Image Exclusion'
            files: 'examples/exclude/compose.yaml'
            exclude: 'redis:7-alpine'
          - scenario: 'No Images Defined'
            files: 'examples/no-images/compose.yaml'
            exclude: ''
          - scenario: 'Empty Compose File'
            files: 'examples/empty/compose.yaml'
            exclude: ''
    outputs:
      test-result: ${{ steps.validate.outputs.result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Cache Action
        id: docker-cache
        uses: ./
        with:
          compose-files: ${{ matrix.files }}
          exclude-images: ${{ matrix.exclude }}
          cache-key-prefix: ${{ needs.generate-run-id.outputs.run_id }}-${{ github.run_attempt }}-${{ matrix.scenario }}

      - name: Output Action Results to Summary
        run: |
          echo "## Action Outputs for ${{ matrix.scenario }} (Second Run)" >> $GITHUB_STEP_SUMMARY
          echo "| Output | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ------ | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Hit | ${{ steps.docker-cache.outputs.cache-hit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image List | ${{ steps.docker-cache.outputs.image-list }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Assert Cache Hit
        id: validate
        run: |
          hit="${{ steps.docker-cache.outputs.cache-hit }}"
          list='${{ steps.docker-cache.outputs.image-list }}'
          echo "Scenario: ${{ matrix.scenario }}"
          echo "Cache Hit: $hit"

          # Handle special scenarios
          if [[ "${{ matrix.scenario }}" == "Empty Compose File" || "${{ matrix.scenario }}" == "No Images Defined" ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For normal scenarios, cache-hit should be true
          if [[ "$hit" != "true" ]]; then
            echo "::error::Expected cache hit on second run but got miss"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "result=success" >> $GITHUB_OUTPUT

  summarize-tests:
    name: Summarize Test Results
    runs-on: ubuntu-latest
    needs: [test-first-run, test-second-run]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          append() { echo "$1" >> "$GITHUB_STEP_SUMMARY"; }
          append "# Docker Compose Cache Action Test Results üê≥"
          append ""
          append "## First Run (Expecting Cache Miss)"
          append "| Scenario | Status |"
          append "|----------|--------|"
          for scenario in "Simple Compose" "Override Compose" "Platform Specific" "Multi-File Compose" "Image Exclusion" "No Images Defined" "Empty Compose File"; do
            [[ "${{ needs.test-first-run.result }}" == "success" ]] && append "| $scenario | ‚úÖ Pass |" || append "| $scenario | ‚ùå Fail |"
          done
          append ""
          append "## Second Run (Expecting Cache Hit)"
          append "| Scenario | Status |"
          append "|----------|--------|"
          for scenario in "Simple Compose" "Override Compose" "Platform Specific" "Multi-File Compose" "Image Exclusion" "No Images Defined" "Empty Compose File"; do
            [[ "${{ needs.test-second-run.result }}" == "success" ]] && append "| $scenario | ‚úÖ Pass |" || append "| $scenario | ‚ùå Fail |"
          done
          append ""
          if [[ "${{ needs.test-first-run.result }}" == "success" && "${{ needs.test-second-run.result }}" == "success" ]]; then
            append "## ‚úÖ All tests passed."
          else
            append "## ‚ùå Some tests failed."
            append "### Check job logs for failure details."
          fi

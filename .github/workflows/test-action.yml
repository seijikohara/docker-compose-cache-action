name: Test Cache Action

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/test-action.yml'
      - 'action.yml'
      - 'dist/index.js'
      - 'examples/**'
  pull_request:
  workflow_dispatch:

jobs:
  # Generate a unique run ID to ensure clean cache state for each test run
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set-run-id.outputs.run_id }}
    steps:
      - name: Generate unique run ID
        id: set-run-id
        run: |
          # Generate a unique ID using timestamp and more entropy
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RANDOM_PART=$(od -An -N4 -tx4 /dev/urandom | tr -d ' \n')
          UNIQUE_ID="test-${TIMESTAMP}-${RANDOM_PART}"
          echo "Generated unique run ID: ${UNIQUE_ID}"
          echo "run_id=${UNIQUE_ID}" >> "${GITHUB_OUTPUT}"

  # First run tests (No Cache expected)
  first-run-tests:
    name: First Run - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: 'Simple Compose'
            files: 'examples/simple/compose.yaml'
            exclude: ''
          - scenario: 'Override Compose'
            files: 'examples/override/compose.yaml'
            exclude: ''
          - scenario: 'Platform Specific'
            files: 'examples/platform/compose.yaml'
            exclude: ''
          - scenario: 'Multi-File Compose'
            files: "examples/multi-file/compose.yaml\nexamples/multi-file/compose.override.yaml"
            exclude: ''
          - scenario: 'Image Exclusion'
            files: 'examples/exclude/compose.yaml'
            exclude: 'redis:7-alpine'
          - scenario: 'No Images Defined'
            files: 'examples/no-images/compose.yaml'
            exclude: ''
          - scenario: 'Empty Compose File'
            files: 'examples/empty/compose.yaml'
            exclude: ''
    outputs:
      test-result: ${{ steps.validate.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the actual Docker Compose Cache Action from the repository
      - name: Run Docker Compose Cache Action
        id: docker-compose-cache
        uses: ./
        with:
          compose-files: ${{ matrix.files }}
          exclude-images: ${{ matrix.exclude }}
          # Generate scenario-specific cache key to prevent cache sharing between matrix jobs
          cache-key-prefix: ${{ needs.setup.outputs.run_id }}-${{ github.run_attempt }}-${{ matrix.scenario }}

      # Verify no cache hit on first run
      - name: Validate cache miss on first run
        id: validate
        run: |
          # Use the Action's built-in cache-hit output directly
          CACHE_HIT="${{ steps.docker-compose-cache.outputs.cache-hit }}"
          IMAGE_LIST="${{ steps.docker-compose-cache.outputs.image-list }}"

          echo "Test scenario: ${{ matrix.scenario }}"
          echo "Images detected: ${IMAGE_LIST}"
          echo "Cache hit: ${CACHE_HIT}"

          # First run should always have a cache miss unless no images are defined
          if [[ -n "${IMAGE_LIST}" && "${CACHE_HIT}" == "true" ]]; then
            echo "::error::‚ùå Unexpected cache hit on first run!"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Expected behavior: No cache hit on first run"
            echo "result=success" >> $GITHUB_OUTPUT
          fi

  # Second run tests (Cache Hit expected)
  second-run-tests:
    name: Second Run - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    needs: [setup, first-run-tests]
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: 'Simple Compose'
            files: 'examples/simple/compose.yaml'
            exclude: ''
          - scenario: 'Override Compose'
            files: 'examples/override/compose.yaml'
            exclude: ''
          - scenario: 'Platform Specific'
            files: 'examples/platform/compose.yaml'
            exclude: ''
          - scenario: 'Multi-File Compose'
            files: "examples/multi-file/compose.yaml\nexamples/multi-file/compose.override.yaml"
            exclude: ''
          - scenario: 'Image Exclusion'
            files: 'examples/exclude/compose.yaml'
            exclude: 'redis:7-alpine'
          - scenario: 'No Images Defined'
            files: 'examples/no-images/compose.yaml'
            exclude: ''
          - scenario: 'Empty Compose File'
            files: 'examples/empty/compose.yaml'
            exclude: ''
    outputs:
      test-result: ${{ steps.validate.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the actual Docker Compose Cache Action from the repository
      - name: Run Docker Compose Cache Action
        id: docker-compose-cache
        uses: ./
        with:
          compose-files: ${{ matrix.files }}
          exclude-images: ${{ matrix.exclude }}
          # Use the same cache key prefix as first run to ensure cache hit
          cache-key-prefix: ${{ needs.setup.outputs.run_id }}-${{ github.run_attempt }}-${{ matrix.scenario }}

      # Verify cache hit on second run for scenarios with images
      - name: Validate cache hit on second run
        id: validate
        run: |
          # Use the Action's built-in cache-hit output directly
          CACHE_HIT="${{ steps.docker-compose-cache.outputs.cache-hit }}"
          IMAGE_LIST="${{ steps.docker-compose-cache.outputs.image-list }}"

          echo "Test scenario: ${{ matrix.scenario }}"
          echo "Images detected: ${IMAGE_LIST}"
          echo "Cache hit: ${CACHE_HIT}"

          # Second run should have a cache hit if images are present
          if [[ -n "${IMAGE_LIST}" && "${CACHE_HIT}" != "true" ]]; then
            echo "::error::‚ùå Expected cache hit on second run but got miss!"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Expected behavior: Cache hit on second run (or no images to cache)"
            echo "result=success" >> $GITHUB_OUTPUT
          fi

  # Collect test results and create summary
  test-summary:
    name: Test Scenarios Summary
    runs-on: ubuntu-latest
    needs: [first-run-tests, second-run-tests]
    if: always()
    steps:
      - name: Create Test Results Summary
        run: |
          # Function to append content to summary file
          append_summary() {
            echo "$1" >> "${GITHUB_STEP_SUMMARY}"
          }

          # Initialize summary
          append_summary "# Docker Compose Cache Action Test Results üê≥"
          append_summary ""

          # Get job status values
          FIRST_RUN_STATUS="${{ needs.first-run-tests.result }}"
          SECOND_RUN_STATUS="${{ needs.second-run-tests.result }}"

          # Create first run tests table
          append_summary "## First Run Tests Summary (Expected: Cache Miss)"
          append_summary ""
          append_summary "| Scenario | Status |"
          append_summary "|----------|--------|"

          # Add all scenarios with their status
          for scenario in "Simple Compose" "Override Compose" "Platform Specific" "Multi-File Compose" "Image Exclusion" "No Images Defined" "Empty Compose File"; do
            if [[ "${FIRST_RUN_STATUS}" == "success" ]]; then
              append_summary "| ${scenario} | ‚úÖ Pass |"
            else
              append_summary "| ${scenario} | ‚ùå Fail |"
            fi
          done
          append_summary ""

          # Create second run tests table
          append_summary "## Second Run Tests Summary (Expected: Cache Hit)"
          append_summary ""
          append_summary "| Scenario | Status |"
          append_summary "|----------|--------|"

          # Add all scenarios with their status
          for scenario in "Simple Compose" "Override Compose" "Platform Specific" "Multi-File Compose" "Image Exclusion" "No Images Defined" "Empty Compose File"; do
            if [[ "${SECOND_RUN_STATUS}" == "success" ]]; then
              append_summary "| ${scenario} | ‚úÖ Pass |"
            else
              append_summary "| ${scenario} | ‚ùå Fail |"
            fi
          done
          append_summary ""

          # Add explanation of action outputs
          append_summary "## üìã Action Outputs Explained"
          append_summary ""
          append_summary "This action provides the following outputs:"
          append_summary ""
          append_summary "| Output | Description |"
          append_summary "|--------|-------------|"
          append_summary "| \`cache-hit\` | Boolean value indicating if all required images were restored from cache |"
          append_summary "| \`image-list\` | Space-separated string of unique image names targeted for caching |"
          append_summary ""

          # Final test status
          if [[ "${{ needs.first-run-tests.result }}" == "success" && "${{ needs.second-run-tests.result }}" == "success" ]]; then
            SUCCESS="true"
          else
            SUCCESS="false"
          fi

          append_summary "## üìù Final Test Summary"
          append_summary ""

          if [[ "${SUCCESS}" == "true" ]]; then
            append_summary "Overall test status: ‚úÖ All tests passed"
          else
            append_summary "Overall test status: ‚ùå Some tests failed"

            # Add more detailed information about failures when they occur
            append_summary ""
            append_summary "### ‚ö†Ô∏è Test Failure Details"
            append_summary ""
            append_summary "For detailed information about failures, check the individual job logs."
          fi
